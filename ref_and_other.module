<?php
/**
* @file
* A description of what your module does.
*/

/**
 * Implements hook_menu().
 */
function ref_and_other_menu() {
  $items = array();
  $items['ref_and_other'] = array(
    'title' => 'Start page',
    'description' => '',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'page callback' => 'ref_and_other_start_page',
//    'page arguments' => array(1),
//    'type' => MENU_CALLBACK,
  );
  $items['ref_and_other/%'] = array(
    'title' => 'Demo page',
    'description' => '',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'page callback' => 'ref_and_other_demo_page',
    'page arguments' => array(1),
//    'type' => MENU_CALLBACK,
  );
  $items['ref_and_other/get_list/%'] = array(
    'title' => 'Child list by nid',
    'page callback' => 'ref_and_other_child_list_by_nid',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
//    'type' => MENU_CALLBACK,
  );
  // A menu callback is required when using ajax outside of the Form API.
  $items['ajax/ref_and_other/%/%/%'] = array(
    'page callback' => 'ref_and_other_ajax_link_response',
    'page arguments' => array(2,3,4),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
//    'type' => MENU_CALLBACK,
  );

  $items['admin/ref_and_other/config'] = array(
    'title' => 'ref_and_other config',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ref_and_other_config_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer nodes'),
//    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}


function ref_and_other_start_page() {
  return 'blank';
}
/**
 * Demo page callback.
 *
 * @param $nid
 * @return string
 */
function ref_and_other_demo_page($nid) {
  return ref_and_other_view($nid, variable_get('ref_and_other_link_text', 'Load more'),0,9);
}

function ref_and_other_view($nid, $link_text, $offset, $length, $inject = NULL) {
  drupal_add_library('system', 'drupal.ajax');
  $output = "<div id='ref_and_other_load_here'>";
  if (isset($inject)) {
    $output .= _ref_and_other_ajax_get_response($nid, 0, $inject);
    $offset = $offset + $length;
  }
  $link = ref_and_other_generate_link($link_text, $nid,$offset,$length);
  $output .="</div><div id='landing-page-load-more-wrapper'>$link</div>";
  return $output;
}

/**
 * Gets a ordered list of child nodes based on the nid provided.
 * @param int $nid
 */
function ref_and_other_child_list_by_nid($nid) {
  $current_node = node_load($nid);
  if(!$current_node){
    drupal_add_http_header('Content-Type', 'application/json');
    drupal_json_output('');
    watchdog('ref_and_other', 'Tried to load %nid but it does not exist.', array('%nid' => $nid));
    drupal_exit();
  }
  $current_node = entity_metadata_wrapper('node', $current_node);
  $parent_bundle = variable_get('ref_and_other_parent_bundle', '');
  //IS the bundle set?
  if (empty($parent_bundle)) {
    drupal_add_http_header('Content-Type', 'application/json');
    drupal_json_output('');
    watchdog('ref_and_other', 'ref_and_other_child_list_by_nid was called but bundle is empty.');
    drupal_exit();
  }
  $type = $current_node->getBundle();
  //Fail if the bundle is wrong.
  if (!empty($parent_bundle) && $type != $parent_bundle) {
    drupal_add_http_header('Content-Type', 'application/json');
    drupal_json_output('');
    watchdog('ref_and_other', 'Tried to load %nid but is not %bundle.', array('%nid' => $nid, '%bundle' => $parent_bundle));
    drupal_exit();
  }

  $child_ref_field_name = variable_get('ref_and_other_reference_field', '');
//  variable_del('ref_and_other_reference_field');
  if (empty($child_ref_field_name)) {
    drupal_add_http_header('Content-Type', 'application/json');
    drupal_json_output('');
    watchdog('ref_and_other', 'ref_and_other_child_list_by_nid was called but child field name is empty.');
    drupal_exit();
  }
  dpm($child_ref_field_name, 'field name');
  $refed_child = array();
  $value = $current_node->{$child_ref_field_name}->value();
  dpm($value, 'value');
  if (!isset($value)) {
    drupal_add_http_header('Content-Type', 'application/json');
    drupal_json_output('');
    watchdog('ref_and_other', 'node %nid does not have a %field', array('%nid' =>$nid, '%field' => $child_ref_field_name));
    drupal_exit();
  }

  //single value ref field
  if (!is_array($value)) {
    if (is_object($value)) {
      $refed_child[] = (int)$current_node->{$child_ref_field_name}->nid->value();
    }
  }
  else{
    //multi value ref field
    foreach ($current_node->{$child_ref_field_name} as $item) {
      $refed_child[] = (int)$item->value()->nid;
    }
  }

  dpm($refed_child, 'ref child');
  $child_bundle = variable_get('ref_and_other_child_bundle', '');
  if (empty($child_bundle)) {
    drupal_add_http_header('Content-Type', 'application/json');
    drupal_json_output('');
    watchdog('ref_and_other', 'ref_and_other_child_list_by_nid was called but child bundle name is empty.');
    drupal_exit();
  }
  $all_child = new EntityFieldQuery();
  $all_child
    ->propertyCondition('status', NODE_PUBLISHED)
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', $child_bundle)
    ->propertyOrderBy('created')
    ->propertyOrderBy('changed')
  ;
  if (isset($offset) && is_numeric($offset) && isset($length) && is_numeric($length) &&!empty($length)) {
    $all_child->range($offset, $length);
  }

  if (!empty($refed_child)) {
    $all_child->propertyCondition('nid', $refed_child, 'NOT IN');
  }
  $results = $all_child->execute();
  if (isset($results['node'])) {
    $results = $results['node'];
  }
  else{
    $results = array();
  }
  if (empty($results)) {
    $results = array();
  }
  $list = array_merge($refed_child, array_keys($results));
  drupal_add_http_header('Content-Type', 'application/json');
  drupal_json_output($list);
  drupal_exit();
//  dpm($list);
//  return json_encode($list);

}

/**
 * @param string $type
 * @param $nid
 * @param $offset
 * @param $length
 * @return string
 */
function ref_and_other_ajax_link_response($type = 'ajax', $nid, $offset , $length) {
  GLOBAL $base_url;
  $output = "";
  $response = drupal_http_request($base_url . '/ref_and_other/get_list/' . $nid);
  $data = drupal_json_decode($response->data);
  $data = array_slice($data, $offset, $length);
  $list = _ref_and_other_style_list($data);

  $output .= $list;

  //Return the data via ajax.
  if ($type == 'ajax') {
    $commands = array();
    // See ajax_example_advanced.inc for more details on the available commands
    // and how to use them.
    $commands[] = ajax_command_append('#ref_and_other_load_here', $output);
    //Need to replace the link with a new offset so it loads new content the next time it is clicked.
    $link = ref_and_other_generate_link(variable_get('ref_and_other_link_text', 'Load more'), $nid, $offset+$length, $length);
    $commands[] = ajax_command_html('#landing-page-load-more-wrapper', $link);

    //Push the updates out via ajax.
    $html_update = array('#type' => 'ajax', '#commands' => $commands);
    ajax_deliver($html_update);
  }
  elseif (user_access("administer nodes")) {
    return $output;
  }
  else{
    drupal_access_denied();
  }
}

/**
 * Generate a link to the load more content.
 * @param $text
 * @param $nid
 * @param $offset
 * @param $length
 * @return string
 * @see ref_and_other_ajax_link_response()

 */
function ref_and_other_generate_link($text, $nid, $offset , $length ) {
  $url = "ajax/ref_and_other/nojs/$nid/$offset/$length";
  $link = l($text, $url, array('attributes' => array('class' => array('use-ajax'))));
  return $link;
}

/**
 * @param $list
 * @return string
 */
function _ref_and_other_style_list($list) {
  $output = '';
  foreach ($list as $item) {
    $output .= _ref_and_other_style_item($item);
  }
  return $output;
}
function _ref_and_other_style_item($item) {
  $node = node_load($item);
  $view = node_view($node, 'teaser');
  return render($view);
}

/**
 * Implements hook_block_info().
 */
function ref_and_other_block_info() {
  $blocks = array();

  $blocks['ref_and_other_load_more_block'] = array(
    'info' => t('Ref and other: Ref and other block'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );

//  hook_block_info_item

  return $blocks;
}

// hook_block_configure

// hook_block_save

/**
 * Implements hook_block_view().
 */
function ref_and_other_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'ref_and_other_load_more_block':
      $block['subject'] = t('');
      $node = menu_get_object();
      if (isset($node->type) && $node->type == 'parent') {
        $block['content'] = array('#markup' => ref_and_other_load_more_block_view($node));
      }
    break;
  }
  return $block;
}

/**
 * Block view call back for ref_and_other_load_more_block
 * @param $node
 * @return string
 * @see ref_and_other_block_view()
 */
function ref_and_other_load_more_block_view($node) {
  $nid = $node->nid;
  $offset = 0;
  $length = 3;
  $list = '';
//  $list = _ref_and_other_ajax_get_response($nid, $offset, $length);
//  dpm($list);
  $list .= ref_and_other_view($nid, variable_get('ref_and_other_link_text', 'Load more'), $offset, $length, $length);
  return $list;
}

function _ref_and_other_ajax_get_response($nid, $offset, $length) {
  GLOBAL $base_url;
  $response = drupal_http_request($base_url . '/ref_and_other/get_list/' . $nid);
  $data = drupal_json_decode($response->data);
  $data = array_slice($data, $offset, $length);
  $list = _ref_and_other_style_list($data);
  return $list;
}

function ref_and_other_config_form($form, &$form_state) {
  $type_options = array();
  foreach (node_type_get_types() as $item) {
    $type_options[$item->type] = $item->name;
  }

  $reference_field_options = array_keys(field_read_fields(array('type' => 'entityreference')));
  $reference_field_options = array_combine($reference_field_options, $reference_field_options);

  $form['ref_and_other_parent_bundle'] = array(
    '#type' =>'select',
    '#title' =>t('Parent bundle name'),
    '#options' => $type_options,
    '#default_value' => variable_get('ref_and_other_parent_bundle', NULL),
    '#required' => TRUE,
  );
  $form['ref_and_other_child_bundle'] = array(
    '#type' =>'select',
    '#title' =>t('Child bundle name'),
    '#options' => $type_options,
    '#default_value' => variable_get('ref_and_other_child_bundle', NULL),
    '#required' => TRUE,
  );
  $form['ref_and_other_reference_field'] = array(
    '#type' =>'select',
    '#title' =>t('Reference field name'),
    '#options' => $reference_field_options,
    '#default_value' => variable_get('ref_and_other_reference_field', NULL),
    '#required' => TRUE,
  );
  $form['ref_and_other_link_text'] = array(
    '#type' =>'textfield',
    '#title' =>t('Load more link text'),
    '#default_value' => variable_get('ref_and_other_link_text', 'Load more'),
    '#required' => TRUE,
  );
  /*
  $form[''] = array(
    '#type' =>'',
    '#title' =>t(''),
    '#default_value' => variable_get('', ''),
    '#required' => TRUE,
  );
  /**/
  return system_settings_form($form);
}
