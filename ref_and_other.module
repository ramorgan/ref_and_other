<?php
/**
* @file
* A description of what your module does.
*/
/*
 * https://www.drupal.org/node/2046693
 */
/**
 * Implements hook_menu().
 */
function ref_and_other_menu() {
  $items = array();
  $items['ref_and_other'] = array(
    'title' => 'Start page',
    'description' => '',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'page callback' => 'ref_and_other_start_page',
//    'page arguments' => array(1),
    //    'type' => MENU_CALLBACK,
  );
  $items['ref_and_other/%'] = array(
    'title' => 'Demo page',
    'description' => '',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'page callback' => 'ref_and_other_demo_page',
    'page arguments' => array(1),
//    'type' => MENU_CALLBACK,
  );
  $items['ref_and_other/get_list/%'] = array(
    'title' => 'Child list by nid',
    'page callback' => 'ref_and_other_child_list_by_nid',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
//    'type' => MENU_CALLBACK,
  );
  // A menu callback is required when using ajax outside of the Form API.
  $items['ajax/ref_and_other/%'] = array(
    'page callback' => 'ref_and_other_ajax_link_response',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
//    'type' => MENU_CALLBACK,
  );
  $items['ajax/ref_and_other/%/%/%'] = array(
    'page callback' => 'ref_and_other_ajax_link_response',
    'page arguments' => array(2,3,4),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
//    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Retun a ordered list of child nodes based on the nid provided.
 * @param int $nid
 */
function ref_and_other_child_list_by_nid($nid = 16) {
  debug($nid);
  $current_node = node_load($nid);
  $current_node = entity_metadata_wrapper('node', $current_node);
  $refed_child = array();
  foreach ($current_node->field_parent_to_child_ref as $item) {
    $refed_child[] = (int)$item->value()->nid;
  }
  $all_child = new EntityFieldQuery();
  $all_child
    ->propertyCondition('status', NODE_PUBLISHED)
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'child')
    ->propertyOrderBy('created')
    ->propertyOrderBy('changed')
  ;
  if (isset($offset) && is_numeric($offset) && isset($length) && is_numeric($length) &&!empty($length)) {
    $all_child->range($offset, $length);
  }

  $all_child->propertyCondition('nid', $refed_child, 'NOT IN');
  $results = $all_child->execute()['node'];
  $list = array_merge($refed_child, array_keys($results));
  drupal_add_http_header('Content-Type', 'application/json');
  drupal_json_output($list);
  drupal_exit();
  }

function ref_and_other_ajax_link_response($type = 'ajax', $nid, $offset = NULL, $length = NULL ) {
  GLOBAL $base_url;
//  debug($type);
//  debug($nid, 'nid');
//  debug($offset, 'offset');
//  debug($length, 'limit');
//  dpm($base_url);

  $output = "";
  //@todo: get the real list
  $response = drupal_http_request($base_url . '/ref_and_other/get_list/' . $nid);
  $data = drupal_json_decode($response->data);
  $data = array_slice($data, $offset, $length);
  $list = _ref_and_other_style_list($data);

//  dpm($data);

  $output .= $list;

  if ($type == 'ajax') {
    $commands = array();
    // See ajax_example_advanced.inc for more details on the available commands
    // and how to use them.
    $commands[] = ajax_command_append('#myDiv', $output);
    $link = _ref_and_other_generate_link(t('Click here'), $nid, $offset+$length, $length);
    $commands[] = ajax_command_html('#landing-page-load-more-wrapper', $link);
    $page = array('#type' => 'ajax', '#commands' => $commands);

    ajax_deliver($page);
  }
  else {
    return $output;
  }

}


/**
 * Demo page callback.
 * @return string
 */
function ref_and_other_demo_page($nid) {
  drupal_add_library('system', 'drupal.ajax');
  $link = _ref_and_other_generate_link(t('Click here'), $nid,0,9);
  $output = "<div id='myDiv'></div><div id='landing-page-load-more-wrapper'>$link</div>";
  return $output;
}

/**
 * Generate a link to the load more content.
 * @param $text
 * @param $nid
 * @param $offset
 * @param $length
 * @return string
 *
 * @todo: error reporting.
 */
function _ref_and_other_generate_link($text, $nid, $offset = NULL, $length = NULL) {
  $url = "ajax/ref_and_other/nojs/$nid";
  if (isset($offset) && is_numeric($offset) && isset($length) && is_numeric($length) &&!empty($length)) {
    $url .= "/$offset/$length";
  }
  else{
    //@todo: error reporting??
  }

  $link = l($text, $url, array('attributes' => array('class' => array('use-ajax'))));
  return $link;
}

function ref_and_other_start_page() {
  return 'blank';
}
/**
 * @param $list
 * @return string
 */
function _ref_and_other_style_list($list) {
//  $list = implode('<br/>', $list);
//  $list .= "<hr/>";
  $output = '';
  foreach ($list as $item) {
    $output .= _ref_and_other_style_item($item);
  }
  $output .= "<hr/>";
  return $output;
}
function _ref_and_other_style_item($item) {
  $node = node_load($item);
  $view = node_view($node, 'teaser');
  return render($view);
}

/**
 * Implements hook_block_info().
 */
function ref_and_other_block_info() {
  $blocks = array();

  $blocks['ref_and_other_load_more_block'] = array(
    'info' => t('Ref and other: Ref and other block'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );

//  hook_block_info_item

  return $blocks;
}

// hook_block_configure

// hook_block_save

/**
 * Implements hook_block_view().
 */
function ref_and_other_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'ref_and_other_load_more_block':
      $block['subject'] = t('');
      $node = menu_get_object();
      if ($node->type == 'parent') {
        $block['content'] = array('#markup' => ref_and_other_load_more_block_view($node));
      }
    break;

    //hook_block_view_item

  }

  return $block;
}

function ref_and_other_load_more_block_view($node) {
  //@todo: pull this out and make a helper function out of it.
  GLOBAL $base_url;
  $nid = $node->nid;
  $offset = 0;
  $length = 9;
  $response = drupal_http_request($base_url . '/ref_and_other/get_list/' . $nid);
  $data = drupal_json_decode($response->data);
  $data = array_slice($data, $offset, $length);
  $list = _ref_and_other_style_list($data);
  return $list;
}
